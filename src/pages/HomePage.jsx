import React, { useEffect, useRef, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Pagination from '@mui/material/Pagination';
import { useSearchParams, useLocation } from 'react-router-dom';

import Categories from '../components/Categories';
import SortPizza from '../components/SortPizza';
import Pizza from '../components/Pizza';
import Skeleton from '../components/Skeleton';

import { setTotalPages, setCurrentPage, selectFilter, setFiltersFromURL, setUrl } from '../redux/filterSlice';
import { selectItems, fetchItems } from '../redux/pizzaSlice';

export default function HomePage() {
  console.log('Component DID MOUNT');
  const [searchParams, setSeatchParams] = useSearchParams();

  const location = useLocation();
  const dispatch = useDispatch();
  const items = useSelector(selectItems);
  const status = useSelector((state) => state.pizza.status);
  const { category, sort, currentPage, searchQuery, totalPages, itemsPerPage, urlHasSearchParams } =
    useSelector(selectFilter);

  const isFirstRender = useRef(true);

  useEffect(() => {
    console.log(`'First useEffect set URL params'  `);
    console.log('category', category);
    console.log('currentPage', currentPage);
    console.log('itemsPerPage', itemsPerPage);
    console.log('sort.sortProperty ', sort.sortProperty);
    setSeatchParams({ page: currentPage, limit: itemsPerPage, category, sort: sort.sortProperty });
  }, [category, sort, currentPage]);

  useEffect(() => {
    console.log('Second useEffect');
    console.log('LOCATION', location.search);
    if (location.search) {
      dispatch(
        setFiltersFromURL({
          category: searchParams.get(`category`),
        }),
      );
    }
    if (urlHasSearchParams) {
      console.log(`Second useEffect params - category=${category} `);
      const categoryUrl = category > 0 ? `&category=${category}` : ``; // mockapi –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–æ–∏—Å–∫—É
      console.log('category', categoryUrl);
      const search = category === 0 ? `&search=${searchQuery}` : ``; // –ø–æ—ç—Ç–æ–º—É –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Ü—Ü –∫–æ–≥–¥–∞ category === 0
      const sortBy = `&sortBy=${sort.sortProperty}&order=${sort.order}`;

      dispatch(fetchItems({ categoryUrl, sortBy, currentPage, search, itemsPerPage }));
    }
  }, [location.search, urlHasSearchParams]);

  if (status === `failed`) {
    return (
      <div className="cart cart--empty">
        <h2> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ç—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="content__top">
        <Categories />
        <SortPizza />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      <div className="content__items">
        {status === 'loading'
          ? [...new Array(6)].map((_, index) => <Skeleton key={index} />) // —Ñ–µ–π–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ —Å–∫–µ–ª–æ—Ç–æ–Ω–∞–º–∏
          : items.map((pizza) => <Pizza pizza={pizza} key={pizza.id} />)}
      </div>
      <Pagination
        count={3} // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        page={currentPage}
        onChange={(event, value) => dispatch(setCurrentPage(value))}
        size="large"
      />
    </div>
  );
}

// console.log('First useEffect set URL params');

// console.log('First useEffect on first render');

//  dispatch(fetchItems) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ Redux store, RT –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ fetchItems,
//  –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞,
//  RT —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ fetchItems.fulfilled,
//  –∫–æ—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞
//  –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ .then() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
//  –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–µ payload

//.then(
//   (fulfilledResult) => {
//     const totalCountItems = fulfilledResult?.payload?.totalCountItems;
//     dispatch(setTotalPages(totalCountItems)); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±—É–¥–µ—Ç –ø–æ—Å—á–∏—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è fetchItems
//   },
// );

// –ö–æ–≥–¥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é createAsyncThunk,
// –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –æ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ payload –∏ meta.
// payload —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏

// console.log('LOCATION', location.search);
// if (location.search) {
//   console.log('LOCATION exsist');
// } else {
//   console.log('LOCATION doesnt exsist');
// }

// useEffect(() => {
//   if (location.search) {
//     dispatch(
//       setFiltersFromURL({
//         category: searchParams.get(`category`),
//       }),
//     );
//   }
// }, [location.search]);

// useEffect(() => {
//   const categoryUrl = category > 0 ? `category=${category}` : ``; // mockapi –Ω–µ –ø–æ–∑–≤–æ–ª—è–µ—Ç –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –∏ –ø–æ–∏—Å–∫—É
//   const search = category === 0 ? `search=${searchQuery}` : ``; // –ø–æ—ç—Ç–æ–º—É –ø–æ–∏—Å–∫ –±—É–¥–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –≤—Å–µ—Ö –ø–∏—Ü—Ü –∫–æ–≥–¥–∞ category === 0
//   const sortBy = `sortBy=${sort.sortProperty}&order=${sort.order}`;

//   dispatch(fetchItems({ categoryUrl, sortBy, currentPage, search, itemsPerPage }));
//   setSeatchParams({ category: category }); // limit: itemsPerPage, sortBy  page: currentPage,
// }, [category, sort, currentPage]);
