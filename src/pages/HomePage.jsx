import React, { useEffect, useRef } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Pagination from '@mui/material/Pagination';
import { useSearchParams, useLocation } from 'react-router-dom';

import Categories from '../components/Categories';
import SortPizza from '../components/SortPizza';
import Pizza from '../components/Pizza';
import Skeleton from '../components/Skeleton';
import { sorts as sortsList } from '../components/SortPizza';
import { setTotalPages, setCurrentPage, selectFilter, setFiltersFromURL, setUrl } from '../redux/filterSlice';
import { selectItems, fetchItems } from '../redux/pizzaSlice';

export default function HomePage() {
  const [searchParams, setSeatchParams] = useSearchParams();
  const dispatch = useDispatch();
  const location = useLocation();
  const items = useSelector(selectItems);
  const status = useSelector((state) => state.pizza.status);
  const { category, sort, currentPage, searchQuery, totalPages, itemsPerPage } = useSelector(selectFilter);

  const wasFirstRender = useRef(false);
  const isSearchParams = useRef(false);

  useEffect(() => {
    if (wasFirstRender.current) setSeatchParams({ page: currentPage, category, sort: sort.sortProperty });
    wasFirstRender.current = true;
  }, [category, currentPage, sort]);

  useEffect(() => {
    if (location.search) {
      const currentSort = sortsList.find((obj) => obj.sortProperty === searchParams.get(`sort`));
      dispatch(
        setFiltersFromURL({
          category: searchParams.get(`category`),
          currentPage: searchParams.get(`page`),
          sort: currentSort,
        }),
      );
      isSearchParams.current = true;
    }
  }, []);

  useEffect(() => {
    const categoryUrl = category > 0 ? `&category=${category}` : ``;
    const search = category === 0 ? `&search=${searchQuery}` : ``;
    const sortBy = `&sortBy=${sort.sortProperty}&order=${sort.order}`;

    if (!isSearchParams.current)
      dispatch(fetchItems({ categoryUrl, sortBy, currentPage, search, itemsPerPage })).then(
        (fulfilledResult) => {
          const totalCountItems = fulfilledResult?.payload?.totalCountItems;
          dispatch(setTotalPages(totalCountItems)); // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –±—É–¥–µ—Ç –ø–æ—Å—á–∏—Ç–∞–Ω–æ —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ —Ç–æ–≥–æ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–∏—Ç—Å—è fetchItems
        },
      );

    isSearchParams.current = false;
  }, [category, currentPage, sort, searchQuery]);

  if (status === `failed`) {
    return (
      <div className="cart cart--empty">
        <h2> –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ üòï</h2>
        <p>–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–∏—Ç—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä–∞–Ω–∏—Ü—É</p>
      </div>
    );
  }

  if (items.length === 0 && status !== 'loading') {
    return (
      <div className="cart cart--empty">
        <h2> –ü–∏—Ü—Ü—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã üòï</h2>
        <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–µ—Ä–Ω—É—Ç—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ —Å–±—Ä–æ—Å–∏—Ç—å –ø–æ–∏—Å–∫–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã</p>
      </div>
    );
  }

  return (
    <div className="container">
      <div className="content__top">
        <Categories />
        <SortPizza />
      </div>
      <h2 className="content__title">–í—Å–µ –ø–∏—Ü—Ü—ã</h2>
      <div className="content__items">
        {status === 'loading'
          ? [...new Array(6)].map((_, index) => <Skeleton key={index} />) // —Ñ–µ–π–∫–æ–≤—ã–π –º–∞—Å—Å–∏–≤ —Å–æ —Å–∫–µ–ª–æ—Ç–æ–Ω–∞–º–∏
          : items.map((pizza) => <Pizza pizza={pizza} key={pizza.id} />)}
      </div>
      <Pagination
        count={totalPages} // –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
        page={currentPage}
        onChange={(event, value) => dispatch(setCurrentPage(value))}
        size="large"
      />
    </div>
  );
}

//  dispatch(fetchItems) –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —ç—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –≤ Redux store, RT –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ fetchItems,
//  –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –∑–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö. –ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–∞,
//  RT —Å–æ–∑–¥–∞–µ—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ fetchItems.fulfilled,
//  –∫–æ—Ç–æ—Ä–æ–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ Redux –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞–ø—Ä–æ—Å–∞
//  –∫–æ–¥ –≤–Ω—É—Ç—Ä–∏ .then() –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
//  –¥–æ—Å—Ç—É–ø –∫ –¥–∞–Ω–Ω—ã–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ –ø–æ–ª–µ payload

// –ö–æ–≥–¥–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ, —Å–æ–∑–¥–∞–Ω–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é createAsyncThunk,
// –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è —É—Å–ø–µ—à–Ω–æ, –æ–Ω–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ payload –∏ meta.
// payload —Å–æ–¥–µ—Ä–∂–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –æ–ø–µ—Ä–∞—Ü–∏–∏
